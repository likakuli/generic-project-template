package {{.daoPackageName}}

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"sync"

    "github.com/golang/glog"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

type LogSql func(ctx context.Context, sql string)

var (
    // ErrNotFound error when record not found
	ErrNotFound  = fmt.Errorf("record Not Found")

	// ErrUnableToMarshalJSON error when json payload corrupt
    ErrUnableToMarshalJSON  = fmt.Errorf("json payload corrupt")

    // ErrUpdateFailed error when update fails
	ErrUpdateFailed  = fmt.Errorf("db update error")

	// ErrInsertFailed error when insert fails
	ErrInsertFailed  = fmt.Errorf("db insert error")

	// ErrDeleteFailed error when delete fails
	ErrDeleteFailed  = fmt.Errorf("db delete error")

	// ErrBadParams error when bad params passed in
	ErrBadParams  = fmt.Errorf("bad params error")

	// Logger function that will be invoked before executing sql
	Logger LogSql

	// db info
	once sync.Once
    db   *gorm.DB
    err  error
)



// Copy a src struct into a destination struct
func Copy(dst interface{}, src interface{}) error {
	dstV := reflect.Indirect(reflect.ValueOf(dst))
	srcV := reflect.Indirect(reflect.ValueOf(src))

	if !dstV.CanAddr() {
		return errors.New("copy to value is unaddressable")
	}

	if srcV.Type() != dstV.Type() {
		return errors.New("different types can be copied")
	}

	for i := 0; i < dstV.NumField(); i++ {
		f := srcV.Field(i)
		if !isZeroOfUnderlyingType(f.Interface()) {
			dstV.Field(i).Set(f)
		}
	}

	return nil
}


func isZeroOfUnderlyingType(x interface{}) bool {
	return x == nil || reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())
}

func open(connString string, maxOpenConn int, maxIdleConn int) *gorm.DB {
	once.Do(func() {
		db, err = gorm.Open(mysql.Open(connString), &gorm.Config{})
		if err != nil {
			panic(err)
		}
		sqlDB, _ := db.DB()
		sqlDB.SetMaxOpenConns(maxOpenConn)
		sqlDB.SetMaxIdleConns(maxIdleConn)
	})

	return db
}

func Close() {
	if db != nil {
		sqlDB, err := db.DB()
		if err != nil {
			glog.Errorf("get sqldb failed with error: %s", err.Error())
		} else {
			if err := sqlDB.Close(); err != nil {
				glog.Errorf("close db failed with error: %s", err.Error())
			}
		}
	}
}
