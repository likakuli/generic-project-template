package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/jmoiron/sqlx"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"github.com/gin-gonic/gin"
	"github.com/droundy/goopt"

    _ "github.com/denisenkom/go-mssqldb"
    _ "github.com/go-sql-driver/mysql"
    _ "github.com/lib/pq"
    _ "github.com/mattn/go-sqlite3"


	_ "{{.module}}/docs"
	"{{.apiFQPN}}"
	"{{.daoFQPN}}"
	"{{.modelFQPN}}"

)

const UserKey = "user" // UserKey key used for storing User struct in context

var (
    // BuildDate date string of when build was performed filled in by -X compile flag
	BuildDate    string

	// LatestCommit date string of when build was performed filled in by -X compile flag
	LatestCommit string

	// BuildNumber date string of when build was performed filled in by -X compile flag
	BuildNumber  string

	// BuiltOnIP date string of when build was performed filled in by -X compile flag
	BuiltOnIP    string

	// BuiltOnOs date string of when build was performed filled in by -X compile flag
	BuiltOnOs    string

	// RuntimeVer date string of when build was performed filled in by -X compile flag
	RuntimeVer   string

	// OsSignal signal used to shutdown
	OsSignal     chan os.Signal
)

// User struct to store info in context
type User struct{
	Name string
}

func (u *User) String() string {
	return u.Name
}

// GinServer launch gin server
func GinServer() (err error){
	url := ginSwagger.URL("{{$.serverScheme}}://{{.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}/swagger/doc.json") // The url pointing to API definition

	router := gin.Default()
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	{{.apiPackageName}}.ConfigGinRouter(router)
	err = router.Run("{{.serverListen}}")
	if err != nil {
		log.Fatalf("Error starting server, the error is '%v'", err)
	}

	return
}



// @title {{.SwaggerInfo.Title}}
// @version {{.SwaggerInfo.Version}}
// @description {{.SwaggerInfo.Description}}
// @termsOfService {{.SwaggerInfo.TOS}}

// @contact.name {{.SwaggerInfo.ContactName}}
// @contact.url {{.SwaggerInfo.ContactURL}}
// @contact.email {{.SwaggerInfo.ContactEmail}}

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host {{.serverHost}}{{if ne $.serverPort 80}}:{{$.serverPort}}{{end}}
// @BasePath {{.SwaggerInfo.BasePath}}
func main() {
    OsSignal = make(chan os.Signal, 1)

	// Define version information
	goopt.Version = fmt.Sprintf(
`Application build information
  Build date      : %s
  Build number    : %s
  Git commit      : %s
  Runtime version : %s
  Built on OS     : %s
`, BuildDate, BuildNumber, LatestCommit, RuntimeVer, BuiltOnOs)
	goopt.Parse(nil)

	db, err := sqlx.Open("{{.sqlType}}", "{{.sqlConnStr}}")
	if err != nil {
		log.Fatalf("Got error when connect database, the error is '%v'", err)
	}

	{{.daoPackageName}}.DB = db
	{{.daoPackageName}}.Logger = func(ctx context.Context, sql string) {
		user, ok := UserFromContext(ctx)
		if ok {
			fmt.Printf("[%v] SQL: %s\n", user, sql)
		} else {
			fmt.Printf("SQL: %s\n", sql)
		}
	}

	{{.apiPackageName}}.ContextInitializer = func(r *http.Request) (ctx context.Context) {

		val, ok := r.Header["X-Api-User"]
		if ok {
			if len(val) > 0 {
				u := &User{Name: val[0]}
				ctx = r.Context()
				ctx = context.WithValue(ctx, UserKey, u)
				r.WithContext(ctx)
			}
		}

		if ctx == nil {
			ctx = r.Context()
		}

		return ctx
	}

	{{.apiPackageName}}.RequestValidator = func(ctx context.Context, r *http.Request, table string, action {{.modelPackageName}}.Action) error {
		user, ok := UserFromContext(ctx)
		if !ok {
			return fmt.Errorf("unknown user")
		}

		fmt.Printf("user: %v accessing %s action: %v\n", user, table, action)
		return nil
	}

	go GinServer()
    LoopForever()
}


// UserFromContext retrieve a User from Context if available
func UserFromContext(ctx context.Context) (*User, bool) {
	u, ok := ctx.Value(UserKey).(*User)
	return u, ok
}

// LoopForever on signal processing
func LoopForever() {
	fmt.Printf("Entering infinite loop\n")

	signal.Notify(OsSignal, syscall.SIGINT, syscall.SIGTERM, syscall.SIGUSR1)
	_ = <-OsSignal

	fmt.Printf("Exiting infinite loop received OsSignal\n")
}
