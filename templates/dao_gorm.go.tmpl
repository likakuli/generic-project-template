package {{.daoPackageName}}

import (
    "context"
    "time"

	"{{.modelFQPN}}"
	"{{.module}}/config"

    "gorm.io/gorm"
    "github.com/guregu/null"
    "github.com/satori/go.uuid"
)

var (
    _ = time.Second
    _ = null.Bool{}
    _ = uuid.UUID{}
)

type I{{.StructName}}Repository interface {
	Add{{.StructName}}(ctx context.Context, record *{{.modelPackageName}}.{{.StructName}}) (result *{{.modelPackageName}}.{{.StructName}}, RowsAffected int64, err error)
	Get{{.StructName}}(ctx context.Context,{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}} {{$field.GoFieldType}},{{end}}{{end -}}) (record *{{.modelPackageName}}.{{.StructName}}, err error)
	GetAll{{.StructName}}(ctx context.Context, page, pagesize int, order string) (results []*{{.modelPackageName}}.{{.StructName}}, totalRows int64, err error)
	Delete{{.StructName}}(ctx context.Context,{{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}} {{$field.GoFieldType}},{{end}}{{end -}}) (rowsAffected int64, err error)
	Update{{.StructName}}(ctx context.Context, {{range $field := .TableInfo.CodeFields}} {{ if $field.PrimaryKeyArgName }} {{$field.PrimaryKeyArgName}} {{$field.GoFieldType}},{{end}}{{end -}}updated *{{.modelPackageName}}.{{.StructName}}) (result *{{.modelPackageName}}.{{.StructName}}, RowsAffected int64, err error)
}

type {{.StructName}}Repository struct{
    db *gorm.DB
}

func NewDefault{{.StructName}}Repository(cfg *config.DBConfig) I{{.StructName}}Repository {
	return &{{.StructName}}Repository{
		db: open(cfg.ConnectionString, cfg.MaxOpenConn, cfg.MaxIdleConn),
	}
}


{{template "dao_gorm_getall.go.tmpl" .}}
{{template "dao_gorm_get.go.tmpl" .}}
{{template "dao_gorm_add.go.tmpl" .}}
{{template "dao_gorm_update.go.tmpl" .}}
{{template "dao_gorm_delete.go.tmpl" .}}

